#ifdef [имя_макроса] - директива условной компиляции, если макрос определен, то в исходный код
вставляется все что находится между этим #ifdef и #endif

__cplusplus - макрос, который задается компилятором. Он объявлен, если используется компилятор C++, и не
объявлен, если C.

extern "C" - конструкция, использующаяся для указания порядка связывания.

Вы говорили что она позволяет убрать ошибки, и это действительно так, но не таким способом. 
Если говорить о конкретно той ситуации, которая существует в лабораторной, то там эта конструкция не делает никакой 
полезной работы и ничего не изменится если ее убрать.

extern "c" нужен чтобы компилятор не использовал "Name mangling" по отношению к тому что идёт после этой конструкции. 
т.е. если просто написать extern "c" как в лабораторной, то не произойдёт ничего. 

"Name mangling" (коверкание имён) нужен в c++ для поддержки перегрузки функций. При компиляции имена функций 
преобразовываются по определенным правилам, которые у разных компиляторов разные.
Например: gcc 2.9 будет преобразовывать void foo(int,char) в foo_Fic

Практическое применение extern "c" заключается в использовании сторонних библиотек и их функций. т.к. библиотека 
может быть скомпилирована отличным от используемого нами компилятора, ее исковерканные имена могут не совпадать с тем,
 как наш компилятор коверкает и их он не сможет найти функции которые вы хотите использовать.

Корректный пример использования:

#ifdef __cplusplus
extern "C" {
#endif

void *memset (void *, int, size_t);
char *strcat (char *, const char *);
int   strcmp (const char *, const char *);
char *strcpy (char *, const char *);

#ifdef __cplusplus
}
#endif
void main(int argc, char* argv[]){
int x;
char a[5];
	if (strcmp(argv[1], "-x") == 0) 
		strcpy(a, argv[2]);
	else 
		memset (a, 0, sizeof(a));
return 0;
}


SDL_CreateRenderer - создает отрисовщик(рендерер) в 2d контексте для окна.

SDL_Renderer* SDL_CreateRenderer(SDL_Window* window, int index, Uint32 flags)
Где window - окно, в котором будет происходить отрисовка.
	index - индекс драйвера который будет использовать рендер. 
	 Если поставить -1, то рендер будет использовать первый подходящий драйвер.
	flags - флаги рендера. Список флагов: SDL_RENDERER_SOFTWARE, SDL_RENDERER_ACCELERATED, SDL_RENDERER_PRESENTVSYNC, SDL_RENDERER_TARGETTEXTURE
	SDL_RENDERER_SOFTWARE - программная отрисовка 
	SDL_RENDERER_ACCELERATED - отрисовщик использует аппатарное ускорение
	SDL_RENDERER_PRESENTVSYNC - отрисовщик пытается синхронизироваться с частотой обновления экрана
	SDL_RENDERER_TARGETTEXTURE - поддержка отрисовки в текстуру
Функция возвращает контекст отрисовки(SDL_Renderer*) если успешно или NULL, если нет.